C6BP = mean(connection6),
C7BP = mean(connection7),
C8BP = mean(connection8),
C9BP = mean(connection9),
C10BP = mean(connection10),
C11BP = mean(connection11),
C12BP = mean(connection12),
C13BP = mean(connection13),
C14BP = mean(connection14),
C15BP = mean(connection15),
C16BP = mean(connection16),
C17BP = mean(connection17),
C18BP = mean(connection18),
C19BP = mean(connection19),
C20BP = mean(connection20),
C21BP = mean(connection21)
) %>%
inner_join(data, by = "subject")  %>%
mutate(C1WP=connection1 -C1BP,
C2WP=connection2 -C2BP,
C3WP=connection3 -C3BP,
C4WP=connection4 -C4BP,
C5WP=connection5 -C5BP,
C6WP=connection6 -C6BP,
C7WP=connection7 -C7BP,
C8WP=connection8 -C8BP,
C9WP=connection9 -C9BP,
C10WP=connection10-C10BP,
C11WP=connection11-C11BP,
C12WP=connection12-C12BP,
C13WP=connection13-C13BP,
C14WP=connection14-C14BP,
C15WP=connection15-C15BP,
C16WP=connection16-C16BP,
C17WP=connection17-C17BP,
C18WP=connection18-C18BP,
C19WP=connection19-C19BP,
C20WP=connection20-C20BP,
C21WP=connection21-C21BP
)
View(dataML)
m1  <- lmer(PANAS_PA ~  session_count + (1|subject) , data = dataML)
library(lmerTest)
library(lme4)
m1  <- lmer(PANAS_PA ~  session_count + (1|subject) , data = dataML)
summary(m1)
m1  <- lmer(PANAS_PA ~  session_count + C1WP + C1BP + (1|subject) , data = dataML)
summary(m1)
fm=as.formula("PANAS_PA ~  session_count + C1WP + C1BP + (1|subject) , data = dataML")
fm=as.formula(paste("PANAS_PA ~  session_count + C1WP + C1BP + (1|subject) , data = dataML"))
m1  <- lmer(PANAS_PA ~  session_count + C1WP + C1BP + (1|subject), data = dataML)
summary(m1)
fm=as.formula(paste("PANAS_PA ~  session_count + C1WP + C1BP + (1|subject), data = dataML"))
fm=as.formula(paste("PANAS_PA ~  session_count + C1WP + C1BP + (1|subject)", "data = dataML"))
paste("PANAS_PA ~  session_count + C1WP + C1BP + (1|subject)", "data = dataML")
fm=as.formula(paste("PANAS_PA ~  session_count + C1WP + C1BP + (1|subject)", "data = dataML",sep = ","))
vars = c("C1WP + C1BP")
otherVars <- c("session_count","(1|subject)")
formList <- lapply(vars,function(x) {
reformulate(c(otherVars,x),response="PANAS_PA")
})
formList
lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})
lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})[[1]]
formList
lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})[[1]]
lapply(formList,lmer,data=dataML)
summary(lapply(formList,lmer,data=dataML))
summary(lapply(formList,lmer,data=dataML)[[1]])
a=summary(m1)
a$coefficients
summary(lapply(formList,lmer,data=dataML)[[1]])$coefficients
for (i in 1:21) {
print(i)
}
for (i in 1:21) {
print(paste("C",i,"WP + C",i,"BP"))
}
for (i in 1:21) {
print(paste("C",i,"WP + C",i,"BP",sep= ""))
}
vars = c("C1WP + C1BP")
otherVars <- c("session_count","(1|subject)")
formList=lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})[[1]]
summary(lapply(formList,lmer,data=dataML)[[1]])$coefficients
formList=lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})
summary(lapply(formList,lmer,data=dataML)[[1]])$coefficients
for (i in 1:21) {
vars = paste("C",i,"WP + C",i,"BP",sep= "")
otherVars <- c("session_count","(1|subject)")
formList=lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})
print(summary(lapply(formList,lmer,data=dataML)[[1]])$coefficients)
}
results=c()
for (i in 1:21) {
vars = paste("C",i,"WP + C",i,"BP",sep= "")
otherVars <- c("session_count","(1|subject)")
formList=lapply(vars,function(x) {reformulate(c(otherVars,x),response="PANAS_PA")})
res=summary(lapply(formList,lmer,data=dataML)[[1]])$coefficients
results=rbind(res,results)
}
results
results=as.data.frame(results)
results$sig=results$`Pr(>|t|)`<0.05
results
load("~/Statistical-Supplementary-Materials/Atos/vips.rds")
vips <- readRDS("~/Statistical-Supplementary-Materials/Atos/vips.rds")
View(vips)
HU_1YR_vips <- readRDS("~/Statistical-Supplementary-Materials/Atos/HU_1YR_vips.rds")
View(HU_1YR_vips)
HU_1YR_vips <- readRDS("~/Statistical-Supplementary-Materials/Atos/HU_1YR_vips.rds")
HU_1YR_vips <- readRDS("~/Statistical-Supplementary-Materials/Atos/HU_1YR_vips.rds")
load("~/Statistical-Supplementary-Materials/Atos/HU_1YR_vips.RData")
library(tidyverse)
library(keras)
install.packages("keras")
library(keras)
library(haven)
library(tidyverse)
library(tidymodels)
library(stacks)
library(vip)
library(pdp)
library(sparkline)
library(plotly)
setwd(paste(dirname(rstudioapi::getActiveDocumentContext()$path),"",sep = ""))
load("~/OneDrive - Universite de Montreal/Usydney/data.RData")
Out_Comes=c("STA_1YR","STA_5YR","MTA_5YR","STA_10YR","MTA_10YR","LTA_10yr","HU_1YR","HU_5YR","HU_10YR","OD_upto1YR","OD_upto5YR","OD_upto10YR","DEATH_1YR","DEATH_5YR","DEATH_10YR","DEATH_15YR")
#DATA$id0101=as.numeric(as.character(DATA$id0101))
#data_Atos$id0101=as.numeric(as.character(data_Atos$id0101))
#merge the data
Data_merged=DATA %>% inner_join(data_Atos, by = "id0101")
#check the pred input with new Excel file
##good for now but have to check later!
table(Data_merged$HU_1YR)
out="HU_1YR"
df=Data_merged%>%
select(c(out,preds))%>%
drop_na()
df$HU_1YR=as.factor(df$HU_1YR)
df_split <- initial_split(df)
train_data <- training(df_split)
test_data <- testing(df_split)
cv_train <- vfold_cv(train_data, v = 10, repeats = 5, strata = out)
rec_obj <- recipe(HU_1YR ~ ., data = train_data)
standardized <- rec_obj %>%
step_center(all_predictors())  %>%
step_scale(all_predictors()) %>%
themis::step_smote (HU_1YR)
train_preped <- prep(standardized) %>%
bake(new_data = NULL)
test_preped <-  prep(standardized) %>%
bake(new_data = test_data)
train_preped_y=train_preped$HU_1YR
test_preped_y=test_preped$HU_1YR
train_preped_x=train_preped[,-c("HU_1YR")]
test_preped_x=test_preped[,-c("HU_1YR")]
train_preped_x=train_preped[,-("HU_1YR")]
train_preped_x=train_preped[,-"HU_1YR"]
train_preped_x=train_preped%>%select(-HU_1YR)
test_preped_x=test_preped%>%select(-HU_1YR)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 2048, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 2048, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 2048, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
y
install_tensorflow()
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
install.packages("keras", type = "source")
install_keras()
library(keras)
install_keras()
library(keras)
library(haven)
library(tidyverse)
library(tidymodels)
library(stacks)
library(vip)
library(pdp)
library(sparkline)
library(plotly)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
install_tensorflow()
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(version = "2.0.0b1", method = "conda", envname = "r-reticulate")
library(keras)
library(keras)
library(haven)
library(tidyverse)
library(tidymodels)
library(stacks)
library(vip)
library(pdp)
library(sparkline)
library(plotly)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
library(tensorflow)
install_tensorflow()
load("~/OneDrive - Universite de Montreal/Usydney/data.RData")
library(keras)
library(haven)
library(tidyverse)
Out_Comes=c("STA_1YR","STA_5YR","MTA_5YR","STA_10YR","MTA_10YR","LTA_10yr","HU_1YR","HU_5YR","HU_10YR","OD_upto1YR","OD_upto5YR","OD_upto10YR","DEATH_1YR","DEATH_5YR","DEATH_10YR","DEATH_15YR")
#colnames(data_Atos)%in%preds
#DATA$id0101=as.numeric(as.character(DATA$id0101))
#data_Atos$id0101=as.numeric(as.character(data_Atos$id0101))
#merge the data
Data_merged=DATA %>% inner_join(data_Atos, by = "id0101")
#check the pred input with new Excel file
##good for now but have to check later!
table(Data_merged$HU_1YR)
out="HU_1YR"
df=Data_merged%>%
select(c(out,preds))%>%
drop_na()
df$HU_1YR=as.factor(df$HU_1YR)
df_split <- initial_split(df)
train_data <- training(df_split)
test_data <- testing(df_split)
cv_train <- vfold_cv(train_data, v = 10, repeats = 5, strata = out)
rec_obj <- recipe(HU_1YR ~ ., data = train_data)
standardized <- rec_obj %>%
step_center(all_predictors())  %>%
step_scale(all_predictors()) %>%
themis::step_smote (HU_1YR)
train_preped <- prep(standardized) %>%
bake(new_data = NULL)
test_preped <-  prep(standardized) %>%
bake(new_data = test_data)
train_preped_y=train_preped$HU_1YR
test_preped_y=test_preped$HU_1YR
train_preped_x=train_preped%>%select(-HU_1YR)
test_preped_x=test_preped%>%select(-HU_1YR)
library(keras)
library(haven)
library(tidyverse)
library(tidymodels)
library(stacks)
library(vip)
library(pdp)
library(sparkline)
library(plotly)
#data_Atos <- read_sav("HU OD 1 5 10y model.sav")
#View(data_Atos)
Out_Comes=c("STA_1YR","STA_5YR","MTA_5YR","STA_10YR","MTA_10YR","LTA_10yr","HU_1YR","HU_5YR","HU_10YR","OD_upto1YR","OD_upto5YR","OD_upto10YR","DEATH_1YR","DEATH_5YR","DEATH_10YR","DEATH_15YR")
#colnames(data_Atos)%in%preds
#DATA$id0101=as.numeric(as.character(DATA$id0101))
#data_Atos$id0101=as.numeric(as.character(data_Atos$id0101))
#merge the data
Data_merged=DATA %>% inner_join(data_Atos, by = "id0101")
#check the pred input with new Excel file
##good for now but have to check later!
table(Data_merged$HU_1YR)
out="HU_1YR"
df=Data_merged%>%
select(c(out,preds))%>%
drop_na()
df$HU_1YR=as.factor(df$HU_1YR)
df_split <- initial_split(df)
train_data <- training(df_split)
test_data <- testing(df_split)
cv_train <- vfold_cv(train_data, v = 10, repeats = 5, strata = out)
rec_obj <- recipe(HU_1YR ~ ., data = train_data)
standardized <- rec_obj %>%
step_center(all_predictors())  %>%
step_scale(all_predictors()) %>%
themis::step_smote (HU_1YR)
train_preped <- prep(standardized) %>%
bake(new_data = NULL)
test_preped <-  prep(standardized) %>%
bake(new_data = test_data)
train_preped_y=train_preped$HU_1YR
test_preped_y=test_preped$HU_1YR
train_preped_x=train_preped%>%select(-HU_1YR)
test_preped_x=test_preped%>%select(-HU_1YR)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
library(reticulate)
py_config()
conda_list()
conda_list(r-reticulate)
library(reticulate)
# indicate that we want to use a specific condaenv
use_condaenv("r-reticulate")
conda_install("tensorflow")
conda_install("r-reticulate","tensorflow")
library(tensorflow)
library(keras)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
# indicate that we want to use a specific condaenv
use_condaenv("r-reticulate")
install_keras(method = 'conda', conda = '/Users/kamranafzali/Library/r-miniconda')
install_keras(method = 'conda', conda = '/Users/kamranafzali/Library/r-miniconda/envs/r-reticulate/lib/libpython')
library(reticulate)
sys <- import("sys")
sys$path
import("keras")
conda_install("r-reticulate","tensorflow=2.0.0b1")
conda_install("r-reticulate","tensorflow=2.0.0")
conda_install("r-reticulate","keras")
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
library(tensorflow)
library(keras)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
install_tensorflow()
install_keras()
library(keras)
library(haven)
library(tidyverse)
library(tidymodels)
library(stacks)
library(vip)
library(pdp)
library(sparkline)
library(plotly)
library(tensorflow)
model_4 <- keras_model_sequential() %>%
layer_dense(units = 512, input_shape = ncol(train_preped_x), activation = 'relu') %>%
layer_batch_normalization() %>%
layer_dense(units = 512, activation = "relu", kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dropout(rate = 0.5) %>%
layer_dense(units = 512, activation = 'relu', kernel_regularizer = regularizer_l2(0.001)) %>%
layer_dense(units = 1, activation = "sigmoid")
library(tensorflow)
sess= tf$Session()
sess
reticulate::conda_list()
library(keras)
model_4 <- keras_model_sequential()
remove.packages("keras")
remove.packages("tensorflow")
remove.packages("reticulate")
install.packages("keras")
keras::install_keras()
Y
library(keras)
model_4 <- keras_model_sequential()
library(tensorflow)
model_4 <- keras_model_sequential()
model_4 <- keras_model_sequential()
reticulate::py_discover_config()
tensorflow::install_tensorflow()
tensorflow::tf_config()
keras_model_sequential()
library(keras)
keras_model_sequential()
install.packages("kerasR")
library(kerasR)
keras_model_sequential()
reticulate::py_install(envname = "r-reticulate", packages = "numpy")
reticulate::py_install(envname = "r-reticulate", packages = "tensorflow2.0")
reticulate::py_install(envname = "r-reticulate", packages = "tensorflow=2.0")
keras_model_sequential()
setwd(paste(dirname(rstudioapi::getActiveDocumentContext()$path),"",sep = ""))
load("~/OneDrive - Universite de Montreal/Usydney/data.RData")
library(keras)
library(haven)
library(tidyverse)
library(tidymodels)
library(stacks)
library(vip)
library(pdp)
library(sparkline)
library(plotly)
library(tensorflow)
reticulate::conda_list()
Out_Comes=c("STA_1YR","STA_5YR","MTA_5YR","STA_10YR","MTA_10YR","LTA_10yr","HU_1YR","HU_5YR","HU_10YR","OD_upto1YR","OD_upto5YR","OD_upto10YR","DEATH_1YR","DEATH_5YR","DEATH_10YR","DEATH_15YR")
#colnames(data_Atos)%in%preds
#DATA$id0101=as.numeric(as.character(DATA$id0101))
#data_Atos$id0101=as.numeric(as.character(data_Atos$id0101))
#merge the data
Data_merged=DATA %>% inner_join(data_Atos, by = "id0101")
#check the pred input with new Excel file
##good for now but have to check later!
table(Data_merged$HU_1YR)
out="HU_1YR"
df=Data_merged%>%
select(c(out,preds))%>%
drop_na()
df$HU_1YR=as.factor(df$HU_1YR)
df_split <- initial_split(df)
train_data <- training(df_split)
test_data <- testing(df_split)
cv_train <- vfold_cv(train_data, v = 10, repeats = 5, strata = out)
rec_obj <- recipe(HU_1YR ~ ., data = train_data)
standardized <- rec_obj %>%
step_center(all_predictors())  %>%
step_scale(all_predictors()) %>%
themis::step_smote (HU_1YR)
train_preped <- prep(standardized) %>%
bake(new_data = NULL)
test_preped <-  prep(standardized) %>%
bake(new_data = test_data)
train_preped_y=train_preped$HU_1YR
test_preped_y=test_preped$HU_1YR
train_preped_x=train_preped%>%select(-HU_1YR)
test_preped_x=test_preped%>%select(-HU_1YR)
keras_model_sequential()
library(tensorflow)
tf$constant("Hellow Tensorflow")
py_config()
reticulate::py_config()
reticulate::py_available()
model <- keras::keras_model_sequential()
keras:::keras_version()
tensorflow::tf_config()
keras:::keras_version()
install_keras(method = c("conda"),
conda = "auto", version = "default", tensorflow = "cpu")
install_keras(method = c("conda"),
conda = "auto", version = "default", tensorflow = "default")
model <- keras::keras_model_sequential()
install_tensorflow(method = c("conda"),
conda = "auto", version = "default", conda_python_version = "3.7")
train_preped_y=train_preped$HU_1YR
model <- keras::keras_model_sequential()
remove.packages("tensorflow")
remove.packages("keras")
remove.packages("kerasR")
devtools::install_github("rstudio/keras",dependencies = T)
devtools::install_github("rstudio/tensorflow",dependencies = T)
install_keras()
keras::install_keras()
install.packages("pkgbuild")
devtools::install_github("rstudio/keras",dependencies = T)
install.packages("processx")
remove.packages("processx")
install.packages("processx")
devtools::install_github("rstudio/keras",dependencies = T)
devtools::install_github("rstudio/tensorflow",dependencies = T)
keras::install_keras()
Y
tensorflow::install_tensorflow()
model <- keras::keras_model_sequential()
reticulate::py_config()
library(reticulate)
virtualenv_install("r-reticulate", "numpy")
library(reticulate)
reticulate::py_config()
keras::keras_model_sequential()
virtualenv_list()
virtualenv_list("r-reticulate")
virtualenv_remove("r-reticulate")
y
reticulate::py_install(envname = "r-reticulate", packages = "numpy")
reticulate::py_config()
reticulate::py_config()
miniconda_update(path = miniconda_path())
reticulate::configure_environment()
install_keras(method = c("auto"),
conda = "auto", version = "default", tensorflow = "default")
keras::install_keras(method = c("auto"),
conda = "auto", version = "default", tensorflow = "default")
tensorflow::install_tensorflow(method = c("auto"),
conda = "auto", version = "default", conda_python_version = "3.7")
reticulate::py_config()
model <- keras::keras_model_sequential()
reticulate::use_condaenv("r-reticulate")
reticulate::py_config()
numpy <- import("numpy")
reticulate::py_install(envname = "r-reticulate", packages = "numpy")
numpy <- import("numpy")
numpy <- import("numpy")
